const crypto = require('crypto')
const privateKey = (() => {
  const iv = Buffer.from('86e3db8f1715719000108cc90344756c', 'hex')
  const key = Buffer.from(process.env.PRIVATE_KEY_ENCRYPTION_KEY, 'hex')
  const encryptedPrivateKey = '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'
  const decipher = crypto.createDecipheriv('aes-256-cbc', key, iv)
  return Buffer.concat([decipher.update(encryptedPrivateKey), decipher.final()])
})()
const jsonwebtoken = require('jsonwebtoken')

module.exports = (req, res) => {
  const { query: { key } } = req
  const jwt = jsonwebtoken.sign(
    {
      url: 'https://dt.in.th/',
      width: 1200,
      height: 630,
      waitUntil: 'networkidle0',
      deviceScaleFactor: 1,
    },
    privateKey,
    {
      algorithm: 'RS256',
      noTimestamp: true,
      issuer: 'ss.dt.in.th',
    }
  )
  res.send(`Hello ${key} https://capture.the.spacet.me/${jwt}!`)
}
